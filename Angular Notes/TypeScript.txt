typescript = procide type safely to JS.
ts is getting less error and having more consistency.
typescript do static checking.
typescript is a developement tool. 
tsc -v     -> to see the version of TS

Typescript types : string, number, boolean, array , null ,undefined , any noImplicitAny, object, union

a function in TS always returns string

in case of variables type anotation is not compulsory but in function it is.

------------------------
LOOPS in JS
var heros = ["thor", "batman", "superman"];
for (var hero in heros) {
    console.log(heros[hero]);
}
for (var hero of heros) {
    console.log(hero);
}

heros.map( hero =>{
    console.log(hero);
})

-----------------------------------

never in return type means function throws an exception or terminates excection of program.

tsc --init -> to create a TS config file
npm init -y -> to create a package.json file
change output directory location to your index.js folder(usually dist).
tsc -w  --> enable watch mode.after watchMode on your compiled JS file will go too the giving location i.e. inside dist>index.js

everything is public by default in class in TS.

access modifier - protected -> can use in same and child class but not beyond these two.

an interface defines the syntax that any entity must adhere to.

interface -> implement ||| class -> extends

abstract class is also a blue print. no object can be created of this.
you can create a object class which is inheriting it.
abstract functions also need to be implemented in inherited class. they are compulsory.
non abstract methods can be defined in abstract class and can also be override in implimenting class.


typeof checks for default types
instanceof checks you for whether this object is instance of some class



--------------------------------

let data:unknown
data=20;
data="kash"
let item:string;
item= data // this will give error as you cannot asign unknown type to a string typr

but if let data : any    // then  the item=data line will not give any error.


Scripting languages are types of programming languages where the instructions are written for a run-time environment, to bring new functions to applications, 
and integrate or communicate complex systems and other programming languages.

ES6 -> scripting language
TypeScript is a free and open-source pure object-oriented programming language. 

-----------------LET VAR CONST-------------------
var is function scope.
let and const are block scope.
Function scope is within the function.
Block scope is within curly brackets.
var a;
var a;   // no error

let b;
let b; // error






Rest operator: The rest parameter is converse to the spread operator. while the spread operator expands elements of an iterable, the rest operator compresses 
them, It collects several elements. In functions when we require to pass arguments but were not sure how many we have to pass, the rest parameter makes it easier.

Spread operator: The spread operator helps us expand an iterable such as an array where multiple arguments are needed, it also helps to expand the object expressions.


for in -> key
for of -> value


a static property and static methods is shared among all instances of a class.
To declare a static property, you use the static keyword. To access a static property, you use the className.propertyName.
Similar to the static property, a static method is also shared across instances of the class. To declare a static method,
you use the static keyword before the method name. 


An abstract class typically includes one or more abstract methods or property declarations. The class which extends the abstract class must define all the 
abstract methods. Abstract classes are mainly for inheritance where other classes may derive from them. We cannot create an instance of an abstract class.

A interface can extend another interface in TS.
a interface can extend a class in TS.
TS interface does not generate any JS code.

Singleton pattern -> for a class there can be only 1 instance i.e. there can be only 1 object of that class.
For Singleton class and private constructor -> https://refactoring.guru/design-patterns/singleton/typescript/example
interface->implements                 abstract->extend


------------------ Namespace in TS----------------------

The namespace is used for logical grouping of functionalities. A namespace can include interfaces, classes, functions and variables to support a single or a group of related functionalities.

A namespace can be created using the namespace keyword followed by the namespace name. All the interfaces, classes etc. can be defined in the curly brackets { }.

-------------
namespace StringUtility {

    export function ToCapital(str: string): string {
        return str.toUpperCase();
    }

    export function SubString(str: string, from: number, length: number = 0): string {
        return str.substr(from, length);
    }
}
----
/// <reference path="StringUtility.ts" />
export class Employee {
    empCode: number;
    empName: string;
    constructor(name: string, code: number) {
        this.empName = StringUtility.ToCapital(name);
        this.empCode = code;
    }
    displayEmployee() {
        console.log ("Employee Code: " + this.empCode + ", Employee Name: " + this.empName );
    }
}

-------------------------

tsc --module amd fileName.ts
tsc --module amd fileName.ts
these 2 are the command is used to compile a module.


interfaces not exist in JS.
no-emmit=true // no outpt will be generated.










